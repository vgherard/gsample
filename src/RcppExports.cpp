// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// gsample_wo_repl
IntegerVector gsample_wo_repl(int size, NumericVector phi);
RcppExport SEXP _gsample_gsample_wo_repl(SEXP sizeSEXP, SEXP phiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type phi(phiSEXP);
    rcpp_result_gen = Rcpp::wrap(gsample_wo_repl(size, phi));
    return rcpp_result_gen;
END_RCPP
}
// gsample_w_repl
IntegerVector gsample_w_repl(int size, NumericVector phi);
RcppExport SEXP _gsample_gsample_w_repl(SEXP sizeSEXP, SEXP phiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type phi(phiSEXP);
    rcpp_result_gen = Rcpp::wrap(gsample_w_repl(size, phi));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_gsample_gsample_wo_repl", (DL_FUNC) &_gsample_gsample_wo_repl, 2},
    {"_gsample_gsample_w_repl", (DL_FUNC) &_gsample_gsample_w_repl, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_gsample(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
