// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// gsample_wor
IntegerVector gsample_wor(size_t size, NumericVector weights, bool log_weights);
RcppExport SEXP _gsample_gsample_wor(SEXP sizeSEXP, SEXP weightsSEXP, SEXP log_weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< size_t >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< bool >::type log_weights(log_weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(gsample_wor(size, weights, log_weights));
    return rcpp_result_gen;
END_RCPP
}
// gsample_wr
IntegerVector gsample_wr(size_t size, NumericVector weights, bool log_weights);
RcppExport SEXP _gsample_gsample_wr(SEXP sizeSEXP, SEXP weightsSEXP, SEXP log_weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< size_t >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< bool >::type log_weights(log_weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(gsample_wr(size, weights, log_weights));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_gsample_gsample_wor", (DL_FUNC) &_gsample_gsample_wor, 3},
    {"_gsample_gsample_wr", (DL_FUNC) &_gsample_gsample_wr, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_gsample(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
